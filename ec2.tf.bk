resource "aws_key_pair" "ec2key" {
  key_name = "Ace_Key_Pair"
  public_key = "${file("${path.module}/my-keypair.pub")}"
#  public_key = "${file("${path.module}/data/id_rsa.pub")}"
#"${file("${path.module}/data/api_resource_policy.json")}"
}

resource "aws_instance" "Ace_instance_with_terraform" {
  count = "${length(var.instances_name)}"
  ami =  "${var.amiforACE}" 
  instance_type          = "${var.instanceType[count.index]}"
  subnet_id = "${aws_subnet.createPrivateSubnet1.id}"
#  iam_instance_profile = "${aws_iam_instance_profile.createProfileSSSA_Access.name}"
  key_name ="${aws_key_pair.ec2key.key_name}"
  disable_api_termination = true
  vpc_security_group_ids=["${element(aws_security_group.sg1.*.id,count.index)}","${data.aws_security_group.infra.id}","${data.aws_security_group.infra_sg2.id}"]
  tags = "${merge(
    local.common_tags,
    local.instance_tags,
    local.encryption_tags,
    local.ebs_tags,
    map(
      "Name", "${lower(var.instances_name[count.index])}",
       "product", "${lower(var.instances_name[count.index])}"
    )
  )}"
  volume_tags ="${merge(
    local.common_tags,
    local.encryption_tags,
    local.ebs_tags,
    map(
      "Name", "${lower(var.instances_name[count.index])}",
       "product", "${lower(var.instances_name[count.index])}"
    )
  )}"
  root_block_device  {
      volume_size="${var.volumneSizeforRoot}"
      delete_on_termination=true
      encrypted=true
      kms_key_id = "${var.kmskeyidforRoot}"
  }
  

}


resource "aws_instance" "Ace_instance_Register" {
  count = "${length(var.register)}"
  ami =  "${var.register[count.index]== "register" ? var.amiforACE : var.amiforapt}" #"${var.amiforACE}" 
  instance_type          = "${var.register[count.index]== "register" ? var.instanceType[0] : var.instanceAPT}" #"${var.instanceType[0]}"
  subnet_id = "${aws_subnet.createPrivateSubnet2.id}"
  key_name ="${aws_key_pair.ec2key.key_name}"
  vpc_security_group_ids=["${element(aws_security_group.sg_for_ACE_Register_Instance.*.id,count.index)}","${data.aws_security_group.infra.id}","${data.aws_security_group.infra_sg2.id}"]
  disable_api_termination = true
  tags = "${merge(
    local.common_tags,
    local.instance_tags,
    local.encryption_tags,
    local.ebs_tags,
    map(
      "Name", "${var.register[count.index]}",
      "product", "${var.register[count.index]}", 
    )
  )}"
  volume_tags ="${merge(
    local.common_tags,
    local.encryption_tags,
    local.ebs_tags,
    map(
      "Name", "${var.register[count.index]}",
      "product", "${var.register[count.index]}",
    )
  )}"
  root_block_device  {
      volume_size="${var.register[count.index]== "register" ? var.volumneSizeforRoot : var.volumneSizeforAPT}"
      delete_on_termination=true
      encrypted=true
      kms_key_id = "${var.kmskeyidforRoot}"
  }

  #depends_on = [aws_ami_copy.Ace_ami]
}

/*resource "aws_instance" "Ace_verify" {
  ami =   "${var.amiforlinuxjump}" #"ami-0f7b1aca79154dddc"
  instance_type = "t2.micro"
  subnet_id = "${aws_subnet.createPublicSubnet.id}"
  vpc_security_group_ids = ["${aws_security_group.createSecurityGroup.id}"]
  key_name ="${aws_key_pair.ec2key.key_name}"
  disable_api_termination = false
  tags = "${merge(
    local.common_tags,
    local.instance_tags,
    local.encryption_tags,
    local.ebs_tags,
    map(
      "Name", "${var.project}_jump_server",
      "product", "${var.project}_jump_server",
    )
  )}"
  volume_tags ="${merge(
    local.common_tags,
    local.encryption_tags,
    local.ebs_tags,
    map(
      "Name", "${var.project}_jump_server",
      "product", "${var.project}_jump_server",
    )
  )}"
  root_block_device  {
      volume_size="${var.volumneSizeforAPT}"
      delete_on_termination=true
      encrypted=true
      kms_key_id = "${var.kmskeyidforRoot}"
  }

}
*/
